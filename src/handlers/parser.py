import re
import requests
from aiogram import types
from aiogram.utils.media_group import MediaGroupBuilder
from bs4 import BeautifulSoup
from src.handlers import main
from src.handlers.keyboard import post_kb
from aiogram.fsm.context import FSMContext


def get_url(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, "html.parser")
    return soup


def get_photo(soup: BeautifulSoup, caption: str) -> [MediaGroupBuilder, types.URLInputFile]:
    photo = soup.find("div", class_="swiper-wrapper").find_all("img")

    list_src_photo = []

    for src in photo:
        list_src_photo.append(src.get("src"))

    if len(list_src_photo) > 10:
        del list_src_photo[10:]

    media_group = MediaGroupBuilder(caption=caption)
    for photo_url in list_src_photo:
        media_group.add_photo(media=photo_url)

    first_photo = types.URLInputFile(str(list_src_photo[0]))

    return media_group, first_photo


def get_tag(soup: BeautifulSoup) -> [int, int, str]:
    # constants to check the list "tags"
    NEED_WORDS_RUSSIAN = ["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:", "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å:", "–≠—Ç–∞–∂:", "–≠—Ç–∞–∂–Ω–æ—Å—Ç—å:"]
    NEED_WORDS_UKRAINIAN = [
        "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç:",
        "–ó–∞–≥–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞:",
        "–ü–æ–≤–µ—Ä—Ö:",
        "–ü–æ–≤–µ—Ä—Ö–æ–≤—ñ—Å—Ç—å:",
    ]
    # parsing tags from the page
    tags = soup.find("ul", class_="css-px7scb").find_all("p")
    all_tag_text = []

    for need_word in NEED_WORDS_RUSSIAN:
        for tag in tags:
            if need_word in tag.text:
                all_tag_text.append(tag.text)

    for need_word in NEED_WORDS_UKRAINIAN:
        for tag in tags:
            if need_word in tag.text:
                all_tag_text.append(tag.text)

    count_room = int((re.search(r"\d+", all_tag_text[0])).group())
    count_area = int((re.search(r"\d+", all_tag_text[1])).group())
    flour_have = int((re.search(r"\d+", all_tag_text[2])).group())
    flour_everything = int((re.search(r"\d+", all_tag_text[3])).group())
    flour = f"{flour_have}/{flour_everything}"

    return count_room, count_area, flour


def get_money(soup: BeautifulSoup) -> [str, str]:
    # parsing money from the page
    money = soup.find("h2", text=re.compile(r".*–≥—Ä–Ω.*"))

    if not money:
        money = soup.find("h3", text=re.compile(r".*–≥—Ä–Ω.*"))

    if not money:
        money = soup.find("h4", text=re.compile(r".*–≥—Ä–Ω.*"))

    if not money:
        return "–°—É–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "#0–≥—Ä–Ω"

    without_space = "".join(money.text.split())
    price = int((re.search(r"\d+", without_space)).group())

    return price, get_tags_for_money(price)


def get_caption(soup: BeautifulSoup) -> str:
    # parsing caption from the page
    caption_text = soup.find("div", class_="css-1t507yq er34gjf0")

    if not caption_text:
        return "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    if len(caption_text.text) > 800:
        return caption_text.text[0:800]

    return caption_text.text


def get_header(soup: BeautifulSoup) -> str | None:
    # parsing caption from the page
    caption_header = soup.find("h4", class_="css-1juynto")

    if not caption_header:
        return None

    return caption_header.text


def create_pieces_caption(soup: BeautifulSoup) -> [str, str, str, str]:
    caption_text = get_caption(soup).title()
    caption_header = get_header(soup).title()

    metros_russian = [
        "–•–æ–ª–æ–¥–Ω–∞—è –ì–æ—Ä–∞",
        "–Æ–∂–Ω—ã–π –≤–æ–∫–∑–∞–ª",
        "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫",
        "–ü–ª–æ—â–∞–¥—å –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏",
        "–ì–∞–≥–∞—Ä–∏–Ω–∞",
        "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è",
        "–ú–∞–ª—ã—à–µ–≤–∞",
        "–¢—É—Ä–±–æ–∞—Ç–æ–º",
        "–î–≤–æ—Ä–µ—Ü –°–ø–æ—Ä—Ç–∞",
        "–ê—Ä–º–µ–π—Å–∫–∞—è",
        "–ú–∞—Å–µ–ª—å—Å–∫–æ–≥–æ",
        "–¢—Ä–∞–∫—Ç–æ—Ä–Ω—ã–π –∑–∞–≤–æ–¥",
        "–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–∞—è",
        "–ì–µ—Ä–æ–µ–≤ –¢—Ä—É–¥–∞",
        "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è",
        "–ë–∞—Ä–∞–±–∞—à–æ–≤–∞",
        "–ö–∏–µ–≤—Å–∫–∞—è",
        "–ü—É—à–∫–∏–Ω—Å–∫–∞—è",
        "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
        "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π",
        "–ü–æ–±–µ–¥–∞",
        "–ê–ª–µ–∫—Å–µ–µ–≤—Å–∫–∞—è",
        "23 –ê–≤–≥—É—Å—Ç–∞",
        "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–∞–¥",
        "–ù–∞—É—á–Ω–∞—è",
        "–ì–æ—Å–ø—Ä–æ–º",
        "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –ë–µ–∫–µ—Ç–æ–≤–∞",
        "–ó–∞—â–∏—Ç–Ω–∏–∫–æ–≤ –£–∫—Ä–∞–∏–Ω—ã",
        "–ú–µ—Ç—Ä–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π",
        "–ü–∞–≤–ª–æ–≤–∞",
    ]

    metro_ukrainian = [
        "–•–æ–ª–æ–¥–Ω–∞ –ì–æ—Ä–∞",
        "–ü—ñ–≤–¥–µ–Ω–Ω–∏–π –≤–æ–∫–∑–∞–ª",
        "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π —Ä–∏–Ω–æ–∫",
        "–ü–ª–æ—â–∞ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—ó",
        "–ì–∞–≥–∞—Ä—ñ–Ω–∞",
        "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞",
        "–ú–∞–ª–∏—à–µ–≤–∞",
        "–¢—É—Ä–±–æ–∞—Ç–æ–º",
        "–ü–∞–ª–∞—Ü –°–ø–æ—Ä—Ç—É",
        "–ê—Ä–º—ñ–π—Å—å–∫–∞",
        "–ú–∞—Å–µ–ª—å—Å—å–∫–æ–≥–æ",
        "–¢—Ä–∞–∫—Ç–æ—Ä–Ω–∏–π –∑–∞–≤–æ–¥",
        "–Ü–Ω–¥—É—Å—Ç—Ä—ñ–∞–ª—å–Ω–∞",
        "–ì–µ—Ä–æ—ó–≤ –ü—Ä–∞—Ü—ñ",
        "–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∞",
        "–ë–∞—Ä–∞–±–∞—à–æ–≤–∞",
        "–ö–∏—ó–≤—Å—å–∫–∞",
        "–ü—É—à–∫—ñ–Ω—Å—å–∫–∞",
        "–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç",
        "–Ü—Å—Ç–æ—Ä–∏—á–Ω–∏–π –º—É–∑–µ–π",
        "–ü–µ—Ä–µ–º–æ–≥–∞",
        "–û–ª–µ–∫—Å—ñ—ó–≤—Å—å–∫–∞",
        "23 –°–µ—Ä–ø–Ω—è",
        "–ë–æ—Ç–∞–Ω—ñ—á–Ω–∏–π —Å–∞–¥",
        "–ù–∞—É–∫–æ–≤–∞",
        "–î–µ—Ä–∂–ø—Ä–æ–º",
        "–ê—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä–∞ –ë–µ–∫–µ—Ç–æ–≤–∞",
        "–ó–∞—Ö–∏—Å–Ω–∏–∫—ñ–≤ –£–∫—Ä–∞—ó–Ω–∏",
        "–ú–µ—Ç—Ä–æ–±—É–¥—ñ–≤–Ω–∏–∫—ñ–≤",
        "–ü–∞–≤–ª–æ–≤–∞",
    ]

    name_metro = ""

    for metro in metros_russian:
        if metro in caption_text:
            name_metro = metro
            break

    if not name_metro:
        for metro in metro_ukrainian:
            if metro in caption_text:
                name_metro = metro
                break

    for metro in metros_russian:
        if metro in caption_header:
            name_metro = metro
            break

    if not name_metro:
        for metro in metro_ukrainian:
            if metro in caption_header:
                name_metro = metro
                break

    count_room, count_area, flour = get_tag(soup)
    money, teg_money = get_money(soup)

    caption_info = (
        f"üè°{count_room}–∫ –∫–≤\n"
        f"üè¢–≠—Ç–∞–∂: {flour}\n"
        f"üîë–ü–ª–æ—â–∞–¥—å: {count_area}–º2\n"
        f"‚ìÇÔ∏è–ú–µ—Ç—Ä–æ: {name_metro}\n"
    )
    caption_money = f"üí≥Ô∏è{money} –≥—Ä–Ω"
    caption_user = f"–û–ø–∏—Å–∞–Ω–∏–µ: {caption_text}"
    caption_tag = f"#{count_room}–ö–ö–í #{teg_money}"
    caption_communication = (
        f"\n\n–°–≤—è–∑—å —Ç—É—Ç:\n" f"–ù–∞–ø–∏—Å–∞—Ç—å ‚úçÔ∏è @realtor_057\n" f"–ü–æ–∑–≤–æ–Ω–∏—Ç—å ‚òéÔ∏è +380996643097"
    )

    return caption_info, caption_money, caption_user, caption_tag, caption_communication


def get_full_caption(
    caption_info, caption_money, caption_user, caption_tag, caption_communication
):
    return (
        f"{caption_info}"
        f"{caption_money}"
        f"\n\n{caption_user}\n\n"
        f"{caption_tag}"
        f"{caption_communication}"
    )


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–≥—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ü—ñ–Ω–∏
def get_tags_for_money(price):
    if 2000 <= price <= 5000:
        return "20005000–≥—Ä–Ω"
    elif 5000 <= price <= 7000:
        return "50007000–≥—Ä–Ω"
    elif 7000 <= price <= 9000:
        return "70009000–≥—Ä–Ω"
    elif 9000 <= price <= 12000:
        return "900012000–≥—Ä–Ω"
    elif 12000 <= price <= 14000:
        return "1200014000–≥—Ä–Ω"
    elif 14000 <= price <= 15000:
        return "1400015000–≥—Ä–Ω"
    elif price >= 15000:
        return "–í—ã—à–µ15000–≥—Ä–Ω"


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö —ñ –∑–∞–ø—É—Å–∫ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
async def get_data(message: types.Message, state: FSMContext):
    soup: BeautifulSoup = get_url(message.text)
    (caption_info, caption_money, caption_user, caption_tag, caption_communication) = (
        create_pieces_caption(soup)
    )

    all_caption = get_full_caption(
        caption_info, caption_money, caption_user, caption_tag, caption_communication
    )
    all_photo, first_photo = get_photo(soup, all_caption)
    # storage of the necessary files

    await state.set_state(main.Caption.control)
    await state.update_data(
        all_photo=all_photo,
        first_photo=first_photo,
        caption_info=caption_info,
        caption_money=caption_money,
        caption_user=caption_user,
        caption_tag=caption_tag,
        caption_communication=caption_communication,
    )

    await message.answer_photo(
        caption=all_caption, photo=first_photo, reply_markup=await post_kb()
    )
